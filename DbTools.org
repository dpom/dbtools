#+TITLE: DbTools.org
#+DESCRIPTION: Software Specifications
#+STARTUP: overview

* Requirements Analysis

** Application Purpose

   The purpose of /dbtolls/ library is to create an empty database based on sql scripts and csv static data files and also
   to migrate the database to a specific migration version. Now only PostgreSQL databases are managed.

   The tool also provides commands for getting the current database migration version and updating database with
   sql scripts and csv static data files from a provided resources path.
   These can be very useful for a developer that uses an empty database but containing a minimal data required by application.

   Other implemented commands are the database deletion, database backup, database restore
   and also the table(s) records export to csv file(s) and import from csv file.


** Usage and Actions

  Usage: dbtools [options] action


*** Possible Actions

   -  create ::  Create a database
   -  migrate :: Migrate database to a specific version
   -  version :: Print database version
   -  update  :: Update database with migration files from a specific directory
   -  delete  :: Delete a database
   -  backup  :: Backup a database to a provided file
   -  restore :: Restore a database from a provided file
   -  export  :: Export table(s) records into csv file(s)
   -  import  :: Import table(s) records from csv file(s)


*** Possible Options


   - ["-a" "--db_archive" "Create database backup file as a custom PostgreSQL archive; optional, used only by the 'backup' command"]
   - ["-c" "--config FILE" "Configuration file" :default ".dbtools.cfg"]
   - ["-d" "--db_name NAME" "Database name"]
   - ["-f" "--db_file FILE" "Database absolute file name - for the 'backup'/'restore' commands"]
   - ["-h" "--help"]
   - ["-p" "--db_password PASS" "Database user password"]
   - ["-r" "--resource PATH" "Resources root full path"]
   - ["-s" "--db_schema" "Create database backup file only for schema, not data; optional, used only by the 'backup' command"]
   - ["-t" "--table NAME" "The table(s) name(s) (comma separated if there are many tables) to export into csv file; mandatory, used only by the 'export' command."]
   - ["-u" "--db_user USER" "Database user"]
   - ["-v" "--db_version NAME" "Database version string using this format 'DDD.dd', where 'DDD' is the major version number and 'dd' is the minor version number; optional, used only by the 'migrate' command"]


*** Cofiguration file structure

  The application default configuration file is =.dbtools.edn=. The configuration file is an edn file.


  The following parameters are defined:
  - database parameters
    -  db_host     :: The default database connection host
    -  db_name     :: The default database name
    -  db_port     :: The default database connection port
    -  db_user     :: The default database connection user
    -  db_password :: The default database connection password
  - other parameters
    - resource  :: the resource path 
    - postgres_dir :: The PostgreSQL installation bin path
    - db_file ::       The default absolute file name used for the database backup and restore operations

  The following rules for taking a parameter value are used:
  - if parameter value is provided in application command options, then that value will be used
  - if no parameter value is provided in application command options, then:
    - if a specific configuration file is provided will take the value from that configuration file
    - otherwise will take the value from the default configuration file

*** Usage examples

**** The =create= command

- Creates an empty database with default values found in the default configuration file:
  #+BEGIN_SRC sh
  dbtools create
  #+END_SRC
- Creates an empty database using the configuration file "DbTest.edn"
  #+BEGIN_SRC sh
  dbtools -c DbTest.edn create
  #+END_SRC

**** The =migrate= command

    - Migrates a provided database using a provided configuration up to the last existing migration
      #+BEGIN_SRC sh
run -d testdb -c dev/Dan.edn migrate
      #+END_SRC
    - Migrates a provided database using a provided configuration up to the provided migration version
      #+BEGIN_SRC sh
run -d testdb -c dev/Dan.edn -v 5 migrate
      #+END_SRC

**** The =version= command

    - Gets the current migration version of provided database
      #+BEGIN_SRC sh
run -d testdb version
      #+END_SRC
    - Gets the current migration version of database defined in the default configuration file
      #+BEGIN_SRC sh
run version
      #+END_SRC

**** The =delete= command

    - Deletes a provided database using a specific configuration file:
      #+BEGIN_SRC sh
run -d testdb -c dev/Dan.edn delete
      #+END_SRC
    - Deletes a database defined in the default configuration file:
      #+BEGIN_SRC sh
run delete
      #+END_SRC

**** The =backup= command

    - Creates a backup file with all schema and data stored in a plain text format for a provided database using a specific configuration
      #+BEGIN_SRC sh
run -d testdbclaudia -c dev/Claudia.cfg -f C:/tmp/db_test3.backup backup
      #+END_SRC
    - Creates a backup file with all schema and data stored in a custom PostgreSQL format for a provided database using a specific configuration
      #+BEGIN_SRC sh
run -d testdbclaudia -c dev/Claudia.cfg -a -f C:/tmp/db_test3_archive.backup backup
      #+END_SRC
    - Creates a backup file only with schema stored in a plain text format for a provided database using a specific configuration
      #+BEGIN_SRC sh
run -d testdbclaudia -c dev/Claudia.cfg -s -f C:/tmp/db_test_schema.backup backup
      #+END_SRC
    - Creates a backup file only with schema stored in a custom PostgreSQL format for a provided database using a specific configuration
      #+BEGIN_SRC sh
run -d testdbclaudia -c dev/Claudia.cfg -a -s -f C:/tmp/db_test_schema_archive.backup backup
      #+END_SRC

**** The =restore= command

    - Restores a provided database using a specific configuration from a plain text format file. The database will be created by default. If database already exists will return an error message.
      #+BEGIN_SRC sh
run -d testdbclaudia1 -c dev/Claudia.cfg -f C:/tmp/db_test_schema.backup restore
      #+END_SRC
    - Restores a provided database using a specific configuration from a custom PostgreSQL format file. The database will be created by default. If database already exists will return an error message.
      #+BEGIN_SRC sh
run -d testdbclaudia1 -c dev/Claudia.cfg -a -f C:/tmp/db_test_schema_archive.backup restore
      #+END_SRC

**** The =export= command

    Exports one or more table(s) records into csv file(s) using the 'copy to' postgresql command. The name of the exported file are the same as the table name, followed by the '.csv' extension. The path where to create the exported records is provided by the '--path' parameter from the system map. The path description must end  with folder separator. There can be more tables specified (comma separated) under the '--table' parameter If the '--undeleted' parameter is present in the system map than will export only non logical deleted records. If this paramater is missing will export all the table records.

    - Exports the 'centers' table records into 'c:/tmp/test_export/centers.csv' file
      #+BEGIN_SRC sh
run -d testdbclaudia -c dev/Claudia.cfg -p c:/tmp/test_export/ -t centers export
      #+END_SRC
    - Exports only the non logically deleted records from the 'users' and 'preferences' tables into 'c:/tmp/test_export/centers.csv' file
      #+BEGIN_SRC sh
run -d testdbclaudia -c dev/Claudia.cfg -p c:/tmp/test_export/ -u -t users,preferences export
      #+END_SRC

**** The =import= command

    Import one or more table records from csv file using the 'copy from' postgresql command. The name of the imported file is the same as the table name, followed by the '.csv' extension. If parameter '--kill' is present then firstly will truncate the table and then will import the entries.

    - Imports the 'centers' table records from 'c:/tmp/test_import/import.csv' file
      #+BEGIN_SRC sh
run -d testdbclaudia -c dev/Claudia.cfg -p c:/tmp/test_import/ -t centers import
      #+END_SRC
    - Imports the 'centers' table records from 'c:/tmp/test_import/import.csv' file by truncating first the 'centers' table
      #+BEGIN_SRC sh
run -d testdbclaudia -c dev/Claudia.cfg -p c:/tmp/test_import/ -t centers -k import
      #+END_SRC

* Architecture

* Implementation


bibliography:~/pers/bibliography/dpom.bib 
bibliographystyle:unsrt


* Setup                                                              :noexport:
#+AUTHOR:    Dan Pomohaci
#+EMAIL:     dan.pomohaci@gmail.com
#+LANGUAGE:  en
#+OPTIONS:   H:5 num:t toc:t \n:nil @:t ::t |:t ^:{} -:nil f:t *:t <:t
#+OPTIONS:   TeX:t LaTeX:t skip:nil d:nil todo:nil pri:nil tags:not-in-toc
#+EXPORT_EXCLUDE_TAGS: noexport
#+LATEX_CLASS: dpom-spec
#+LATEX_HEADER: \usepackage[hmargin=2cm,top=4cm,headheight=65pt,footskip=65pt]{geometry}
#+LaTeX_HEADER: \renewcommand{\headrulewidth}{0pt}
#+LaTeX_HEADER: \renewcommand{\footrulewidth}{0pt}
#+LaTeX_HEADER: \newcommand{\docVersion}{0.2}
#+LaTeX_HEADER: \newcommand{\docTitle}{DbTools}
#+LaTeX_HEADER: \newcommand{\docSubTitle}{Software Specifications}
#+LaTeX_HEADER: \fancyhead[CE,CO,LE,LO,RE,RO]{} %% clear out all headers
#+LaTeX_HEADER: \fancyhead[C]{\begin{tabular}{|m{3.0cm}|m{10.0cm}|m{2.5cm}|} \hline \includegraphics[height=1.5cm,width=2.5cm]{doc/img/LogoCogito.png} & \centering \Large{\docTitle{} - \docSubTitle{}} & \centering \tiny{\ Data: {\today}\ Rev. \docVersion}\tabularnewline \hline \end{tabular}}
#+LaTeX_HEADER: \fancyfoot[CE,CO,LE,LO,RE,RO]{} %% clear out all footers
#+LaTeX_HEADER: \fancyfoot[C]{\begin{tabular}{|m{3.0cm}|m{10.0cm}|m{2.5cm}|} \hline  & \centering \small{Cogito Solutions} & \centering \small{Page \thepage\ of \pageref{LastPage}}\tabularnewline \hline \end{tabular}}
#+LATEX_HEADER: \input{doc/mytitle}
